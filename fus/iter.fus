
load module: fus format


sig new: -> it
sig iter: x -> it
sig next: it -> it value ok



def next next: dup .next call next

def new new:
    obj
        0 =.i
        fun next(null f) =.next

def iter iter:
    obj
        &iter_arr =.arr
        &iter_int =.int
    over typeof get call iter

def iter_arr iter:
    @new
        swap =.a
        fun next:
            dup .a len 0 > ifelse:
                ..i 1 + =.i
                ..a lpop ='value =.a
                ''value t
            : null f
        =.next

def iter_int iter:
    @new
        swap =.end
        fun next:
            dup .i over .end < ifelse:
                ..i dup ='i 1 + =.i
                ''i t
            : null f
        =.next

def test(->):
    arr 1, 2, 3, ='a

    'a @iter do loop:
        dup .i ='i
        @next while loop ='value

        arr
            "Step ",
            ''i,
            ": ",
            ''value,
        @(format format) p
    drop drop

    'a @iter
        @next assert 1 == assert
        @next assert 2 == assert
        @next assert 3 == assert
    @next not assert drop drop
