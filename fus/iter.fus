
load: fus format
use: format format


defsig new: -> it
defsig iter: x -> it
defsig next: it -> it value ok



sig next def next: dup .next call next

sig new def new:
    obj
        0 =.i
        sig next fun(null f) =.next

sig iter def iter:
    obj
        &iter_arr =.arr
        &iter_int =.int
    over typeof get call iter

sig iter def iter_arr:
    @new
        swap =.a
        sig next fun:
            dup .a len 0 > ifelse:
                ..i 1 + =.i
                ..a lpop ='value =.a
                ''value t
            : null f
        =.next

sig iter def iter_int:
    @new
        swap =.end
        fun next:
            dup .i over .end < ifelse:
                ..i dup ='i 1 + =.i
                ''i t
            : null f
        =.next

sig(->) def test:
    arr 1, 2, 3, ='a

    'a @iter do loop:
        dup .i ='i
        @next while loop ='value

        arr "Step ", ''i, ": ", ''value, "\n",
        @format str_p
    drop drop

    'a @iter
        @next assert 1 == assert
        @next assert 2 == assert
        @next assert 3 == assert
    @next not assert drop drop
