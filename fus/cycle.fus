
def unbox of(boxed -> unboxed): call(-> x)


def A of(-> boxed):
    obj
        100 =.label
        &B =.link
def B of(-> boxed):
    obj
        200 =.label
        &C =.link
def C of(-> boxed):
    obj
        300 =.label
        &A =.link

def test of(->):
    # The links of A, B, C form a cycle.
    # We follow the links by unboxing them.
    # The compiler should be smart enough to cache
    # the values of defs with signature (-> x),
    # so even if we form a really big directed graph
    # structure, there should be no cost to following
    # its links.

    @A
        dup p
        dup .label 100 == assert
        .link @unbox
        dup p
        dup .label 200 == assert
        .link @unbox
        dup p
        dup .label 300 == assert
        .link @unbox
        dup p
        dup .label 100 == assert
    drop

@test
