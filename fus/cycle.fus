
defsig const: -> x
sig(boxed -> unboxed) def unbox: call const


module Cycle:

    sig const def A:
        obj
            100 =.label
            &B =.link
    sig const def B:
        obj
            200 =.label
            &C =.link
    sig const def C:
        obj
            300 =.label
            &A =.link

sig(->) def test:
    # The links of A, B, C form a cycle.
    # We follow the links by unboxing them.
    # The compiler should be smart enough to cache
    # the values of defs with signature (-> x),
    # so even if we form a really big directed graph
    # structure, there should be no cost to following
    # its links.

    @(Cycle A)
        dup .label 100 == assert
        .link @unbox
        dup .label 200 == assert
        .link @unbox
        dup .label 300 == assert
        .link @unbox
        dup .label 100 == assert
    drop
