
# Multidimensional array class


load: fus arrtools
load: fus funtools
use: arrtools resize
use: funtools map
use: funtools all
use: funtools prod


module Array:

    sig: dims -> Array
    def new:
        ='dims
        'dims fun(is_int) @map @all assert
        (obj arr =.dims arr =.data) 'dims @redim

    sig: Array dims -> Array
    def redim:
        ='new_dims
        'new_dims =.dims
        ..data ('new_dims @prod) @resize =.data

    sig: Array v -> i
    def get_i:
        # transform v (an arr of int indices for individual dimensions) into i
        # (an int index into a data arr)
        ='v ='array
        'array .dims ='dims
        0 ='i

        0 'v len do:
            over over < while
            swap dup ='v_i 1 + swap

            ''i
                'dims 'v_i .$ *
                'v 'v_i .$ +
            ='i
            loop
        drop drop

        ''i

    sig: Array v -> value
    def get:
        ='v ='array
        'array 'v @get_i ='i
        'array .data 'i .$

    sig: Array value v -> Array
    def set:
        ='v ='value ='array
        'array 'v @get_i ='i
        ''array ..data 'value 'i =.$ =.data

    sig: Array v -> Array value
    def rip:
        ='v ='array
        'array 'v @get_i ='i
        'array .data 'i ..$ ='value =.data
        ''value

    sig(->)
    def test:
        (arr 2, 3,) @new
            dup (arr 0, 0,) @get is_null assert

            "HA" (arr 0, 0,) @set
            "HO" (arr 1, 0,) @set
            "HI" (arr 0, 1,) @set

            dup (arr 0, 0,) @get "HA" str_eq assert
            dup (arr 1, 0,) @get "HO" str_eq assert
            dup (arr 0, 1,) @get "HI" str_eq assert

            dup (arr 0, 0,) @rip "HA" str_eq assert
                dup (arr 0, 0,) @get is_null assert
            drop
        drop

