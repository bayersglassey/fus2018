
module Prend:

    def sig: -> prend
    new:
        obj
            arr =.prismels
            arr =.shapes

    def sig: prend prismel name -> prend
    add_prismel:
        ='name ='prismel
        ''prismel 'name =.name ='prismel
        ..prismels 'prismel, =.prismels


module Prismel:

    def N_FLIP: 2
    def N_ROT: 12
    def N_IMAGES: @N_FLIP @N_ROT *

    def sig: -> prismel
    new:
        obj
            null =.name
            arr @N_IMAGES repeat =.images

    def sig: data -> prismel
    parse:
        ='data
        @new ='prismel

        ''data
            lpop `images sym_eq assert
            lpop ='images_data
        len 0 == assert

        'images_data len @N_IMAGES == assert
        'images_data len @int_togen for ~image_loop:
            ='image_i
            'images_data 'image_i .$ ='image_data

            'image_data len @int_togen for ~line_loop:
                ='line_i
                'image_data 'line_i .$ ='line_data

                'line_data is_int ifelse:
                    'line_i 0 == assert
                    'line_data ='other_image_i
                    'other_image_i 'image_i < assert
                    'images_data 'other_image_i .$ ='other_image_data
                    ''images_data 'other_image_data 'image_i =.$ ='images_data
                    drop loop ~image_loop
                        # NOTE: the "drop" is for the generator for ~line_loop
                        # Should we... build that into the "for" magic?..
                :
                    'line_data
                        lpop is_int assert
                        lpop is_int assert
                        lpop is_int assert
                    len 0 == assert

        ''prismel
            'images_data =.images

module Shape:





@(Prend new)

    data:
        # ++
        # +X
        images:
            : (-1 -1 2) (-1 0 2)
            (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)
            (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0) (0)
    @(Prismel parse)
    `vert @(Prend add_prismel)

    data:
        # an edge (invisible line)
        images:
            () () () () () () () () () () () ()
            () () () () () () () () () () () ()
    @(Prismel parse)
    `edge @(Prend add_prismel)

    data:

        # +---+
        # |   |
        # |   |
        # 0---+

        #     +   +
        # ++ +++ +++ ++   +                             +
        # ++  +   +  ++  +++   +                    +  +++
        # .   .    .   .  + . +++. ++.  +.  X  X+  X++ .+
        #                      +   ++  +++ +++ ++   +
        #                               +   +

        images:
            : ( 0 -2  2) ( 0 -1  2)
            : ( 0 -3  1) (-1 -2  3) ( 0 -1  1)
            : (-1 -3  1) (-2 -2  3) (-1 -1  1)
            : (-2 -2  2) (-2 -1  2)
            : (-2 -2  1) (-3 -1  3) (-2  0  1)
            : (-2 -1  1) (-3  0  3) (-2  1  1)
            : (-2  0  2) (-2  1  2)
            : (-1  0  1) (-2  1  3) (-1  2  1)
            : ( 0  0  1) (-1  1  3) ( 0  2  1)
            : ( 0  0  2) ( 0  1  2)
            : ( 1 -1  1) ( 0  0  3) ( 1  1  1)
            : ( 1 -2  1) ( 0 -1  3) ( 1  0  1)
            :  9
            :  8
            :  7
            :  6
            :  5
            :  4
            :  3
            :  2
            :  1
            :  0
            : 11
            : 10
    @(Prismel parse)
    `sq @(Prend add_prismel)
='prend

'prend p
