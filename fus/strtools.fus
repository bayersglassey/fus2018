
def tochar of(s -> c): 0 str_getcode
def a of(-> i): "a" @tochar
def z of(-> i): "z" @tochar
def A of(-> i): "A" @tochar
def Z of(-> i): "Z" @tochar
def TO_UPPER of(-> i): @A @a -

def isupper of(c -> b): ='c
    'c @A >= and: 'c @Z <=
def islower of(c -> b): ='c
    'c @a >= and: 'c @z <=
def isalpha of(c -> b): ='c
    'c @isupper or: 'c @islower
def upper of(s -> s):
    dup str_len int_for: ='i
        dup 'i str_getcode dup @islower if(@TO_UPPER +) 'i str_setcode
def lower of(s -> s):
    dup str_len int_for: ='i
        dup 'i str_getcode dup @isupper if(@TO_UPPER -) 'i str_setcode


def join of(arr -> str): "" swap arr_for: str_join

def get_hello_msg of(name -> str): ='name (arr "Hello, ", 'name, "!",) @join
def say_hello of(name ->): @get_hello_msg str_p "\n" str_p

def test of(->):
    "Joe Q" @lower "joe q" str_eq assert
    "Joe Q" @upper "JOE Q" str_eq assert
    "Joe Q" @get_hello_msg "Hello, Joe Q!" str_eq assert
    "Joe Q" @say_hello

