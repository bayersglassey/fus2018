
def has of(obj key -> bool):
    dup is_arr ifelse:
        # key is an arr of syms
        ='keys ='obj
        T ='has
        'keys arr_for: ='key
            'obj 'key has not if: F ='has break
            ''obj 'key get ='obj
        ''has
    :
        # key is a sym
        has

def get of(obj key -> value): null @dget

def dget of (obj key default -> value):
    ='default
    dup is_arr ifelse:
        # key is an arr of syms
        ='keys ='obj
        'keys arr_for: ='key
            'obj 'key has not if: 'default ='obj break
            ''obj 'key get ='obj
        ''obj
    :
        # key is a sym
        ='key ='obj
        'obj 'key has ifelse: 'obj 'key get
        : 'default

def rip of(obj key -> obj value): null @drip

def drip of(obj key default -> obj value):
    over is_arr ifelse:
        # key is an arr of syms
        @drip_keys

        def drip_keys of(obj keys default -> obj value):
            ='default ='keys ='obj
            'keys len 0 > ifelse:
                ''keys lpop ='key ='keys
                'obj 'key has not ifelse: ''obj 'default
                :
                    ''obj 'key rip
                        'keys 'default @drip_keys ='value
                    'key set
                    ''value
            :
                # This is kind of weird, but makes the recursion work out.
                # Does it make any sense, conceptually?
                # "Ripping with an empty array of keys rips the object
                # out of null" ...or something
                null 'obj
    :
        # key is a sym
        ='default ='key ='obj
        ''obj dup 'key has ifelse: 'key rip
        : 'default

def set of(obj value key -> obj):
    dup is_arr ifelse:
        # key is an arr of syms
        @set_keys

        def set_keys of(obj value keys -> obj):
            ='keys ='value ='obj
            'keys len 0 > ifelse:
                ''keys lpop ='key ='keys
                ''obj 'key rip
                    ''value ''keys @set_keys
                'key set
            :
                ''value
    :
        # key is a sym
        set



def add_prefix of(obj str -> obj):
    # Example:
    #     (obj 1 =.x 2 =.y) "la" @obj_add_prefix -> (obj 1 =.lax 2 =.lay)

    ='prefix ='o0
    obj ='o1

    'o0 keys arr_for: ='key0
        'key0 sym_tostr 'prefix swap str_join str_tosym ='key1
        ''o1 ('o0 'key0 get) 'key1 set ='o1

    ''o1



def test of(->):
    obj 1 =.x 2 =.y ='o
    'o `x @get 1 == assert
    'o `z @get is_null assert
    'o `z "LOL" @dget "LOL" str_eq assert

    (obj 1 =.x (obj 2 =.x) =.child) ='parent
    'parent (arr `x,) @get 1 == assert
    'parent (arr `child, `x,) @has assert
    'parent (arr `child, `y,) @has not assert
    (arr `child, `x,) ='key
    'parent 3 'key @set 'key @get 3 == assert
    'parent 'key @get 2 == assert
    'parent 'key @has assert

    'parent 'key @rip
        2 == assert
    'key @get is_null assert

    'o "__" @add_prefix ='o2
    'o2 ?.x not assert
    'o2 ?.__x assert
    'o2 ?.y not assert
    'o2 ?.__y assert

@test
