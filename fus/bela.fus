
load module: fus music
use def: music square
use def: music triangle
use def: music noise
use def: music apply_sounds
use def: music loop


sig beat: -> beat
sig scale: -> scale
sig sounds: -> sounds
sig pattern: -> pattern
sig song: -> song


def beat beat: 250


def jazz_scale scale:
    # I'm gonna call this a "jazz scale" for now...
    # ...until we can fix it

    obj ='scale

    arr
        `a0, `b0, `c0, `d0, `e0, `f0, `g0,
        `a1, `b1, `c1, `d1, `e1, `f1, `g1,
        `a2, `b2, `c2, `d2, `e2, `f2, `g2,
        `a3, `b3, `c3, `d3, `e3, `f3, `g3,
    ='keys

    0 'keys len do loop:
        over over < while loop
        swap dup ='i 1 + swap

        'keys 'i .$ ='key
        500 (29 'i -) 1 6000 (obj -5 =.volinc) @square
        ''scale swap 'key set ='scale
    drop drop

    ''scale


def blues1_scale scale:
    @jazz_scale ='jazz_scale
    obj
        'jazz_scale .a0 =.v1a
        'jazz_scale .a1 =.v1b
        'jazz_scale .d1 =.v1c
        'jazz_scale .e1 =.v1d
        'jazz_scale .a2 =.v1e


def blues2_scale scale:
    @jazz_scale ='jazz_scale
    obj
        'jazz_scale .a2 =.v2a
        'jazz_scale .b2 =.v2b
        'jazz_scale .c2 =.v2c
        'jazz_scale .e2 =.v2d
        'jazz_scale .f2 =.v2e
        'jazz_scale .g2 =.v2f
        'jazz_scale .a3 =.v2g


def drum_sounds sounds:
    obj
         500 10000 (obj -10 =.volinc 5000 =.limit 1 =.step t =.wacky) @noise =.drum1
         500 10000 (obj -10 =.volinc 5000 =.limit 2 =.step t =.wacky) @noise =.drum2
         500 10000 (obj -10 =.volinc 5000 =.limit 3 =.step t =.wacky) @noise =.drum3
        1500 10000 (obj -10 =.volinc 1000 =.limit t =.wacky) @noise =.cymb1

def drums1 pattern:
    data:
        drum1,, drum2,, drum3,,
        drum1,, drum2,, drum3,,
        cymb1,,      ,, drum1,,
        cymb1,, cymb1,, drum2,,
    @drum_sounds @apply_sounds

def drums2 pattern:
    data:
        drum1,, drum2,, drum3,,
        cymb1,,      ,,      ,,
        drum1,,      ,,      ,,
        cymb1,,      ,, drum1,,
    @drum_sounds @apply_sounds


def bass_sounds sounds:
    obj
         500  500 10000 (obj 1000 =.limit t =.wacky) @triangle =.bass1
         500 1000  9000 (obj 0 =.limit t =.wacky) @triangle =.bass2
         500  750  9000 (obj 1 =.addinc1 t =.wacky) @triangle =.bass3
        7500 1000 15000 (obj -1 =.addinc1 t =.wacky) @triangle =.bass4


def bass pattern:
    data:
        bass1 ,, ,, ,,
        bass2 ,, ,, ,,
        bass1 ,, ,, ,,
        bass3 ,, ,, ,,

        bass1 ,, ,, ,,
        bass2 ,, ,, ,,
        bass1 ,, ,, ,,
        bass4 ,, ,, ,,
    @bass_sounds @apply_sounds


def verse pattern:
    data: ,, ,, ,,
    4 @loop 4 @loop


def melody1 pattern:
    data:
        v1e,,    ,, v1e,,
           ,,    ,, v1e,,
        v1b,, v1c,, v1d,,
        v1e,,    ,, v1e,,

           ,,    ,,    ,,
           ,,    ,,    ,,
           ,,    ,,    ,,
           ,,    ,,    ,,

        v1e,,    ,, v1e,,
           ,,    ,, v1e,,
        v1b,, v1c,, v1d,,
        v1a,,    ,, v1a,,

           ,,    ,,    ,,
           ,,    ,,    ,,
           ,,    ,,    ,,
           ,,    ,,    ,,
    @blues1_scale @apply_sounds


def melody2 pattern:
    data:
        v2g,, v2f,, v2e,,
        v2f,, v2e,, v2d,,
        v2e,, v2d,, v2c,,
        v2c,, v2d,, v2e,,

        v2g,, v2f,, v2e,,
        v2f,, v2e,, v2d,,
        v2e,,    ,, v2e,,
        v2d,, v2e,, v2f,,

        v2g,, v2f,, v2e,,
        v2f,, v2e,, v2d,,
        v2e,, v2d,, v2c,,
        v2c,, v2d,, v2e,,

        v2f,, v2d,, v2c,,
        v2b,, v2a,, v2a,,
           ,,    ,,    ,,
           ,,    ,,    ,,
    'blues2_scale @apply_sounds



def add_song_part(song_parts new_part name -> song_parts):
    ='name ='new_part ='song_parts
    ''new_part 'song_parts @apply_sounds ''song_parts swap 'name set


def song song:
    obj
        @drums1 =.drums1
        @drums1 =.drums2
        @drums1 =.bass
        @drums1 =.melody1
        @drums1 =.melody2
    :
        data:
            drums1
            drums1

            (bass)
            drums1
            drums1
        `intro @add_song_part

        data:
            : @loop 4: drums1
            : @loop 2: bass
            melody1
        `verse1 @add_song_part

        data:
            : @loop 4: drums2
            melody2
        `verse2 @add_song_part

        data:
            : @loop 4: drums1
            : @loop 2: bass

            # maybe the melodies harmonize?..
            (melody1) melody2
        `verse3 @add_song_part


        data:
            intro
            @loop 2: verse1
            @loop 2: verse2
            @loop 2: verse3
        `song @add_song_part
    ='song_parts


    'song_parts


def print_song(song ->):
    load module: fus format

    ='song
    'song keys do loop:
        dup len 0 > while loop
        lpop ='key
        'song 'key get ='part

        "\n" str_p
        "*** " str_p
        'key sym_tostr str_p
        " ***:\n" str_p

        'part do loop:
            dup len 0 > while loop
            lpop ='part_part
            "  " str_p
            'part_part @(format tostr) str_p
            "\n" str_p
        drop
    drop

@song @print_song
