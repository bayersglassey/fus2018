
def sig(int -> gen) int_togen:
    gen takes(n):
        ='n
        0 ='i
        do:
            'i 'n < while 'i out
            ''i 1 + ='i loop

def sig(xs f ->xs) map:
    over is_arr if:
        ='f
        ='xs
        'xs len @int_togen for:
            ='i
            ''xs 'i ..$ 'f call(x -> y) 'i =.$ ='xs
        ''xs
    else: gen takes(xs f):
        ='f
        for: 'f call(x -> y) out

def sig(xs x f -> x) fold:
    ='f ='x ='xs
    'xs len @int_togen for:
        ='i
        ''x ('xs 'i .$) 'f call(x y -> z) ='x
    ''x

def sig(xs -> bool) all:
    T fun(and) @fold

def sig(xs -> bool) any:
    F fun(or) @fold

def sig(xs -> int) sum:
    0 fun(+) @fold

def sig(xs -> int) prod:
    1 fun(*) @fold



def sig(->) test:

    (arr 1, 2, 3,) fun(10 *) @map
        lpop 10 == assert
        lpop 20 == assert
        lpop 30 == assert
    len 0 == assert

    gen(1 out 2 out 3 out) fun(10 *) @map
        >> 10 == assert
        >> 20 == assert
        >> 30 == assert
    done assert

    (arr T, T, T,) @all assert
    (arr T, F, T,) @all not assert

    (arr T, F, T,) @any assert
    (arr F, F, F,) @any not assert

    (arr 1, 2, 3, 4,) @sum 10 == assert
    (arr 1, 2, 3, 4,) @prod 24 == assert


