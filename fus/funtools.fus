
sig: xs f -> xs
def map:
    ='f ='xs
    0 'xs len do loop:
        over over < while loop
        swap dup ='i 1 + swap
        ''xs 'i ..$ 'f call(x -> y) 'i =.$ ='xs
    drop drop
    ''xs

sig: xs x f -> x
def fold:
    ='f ='x ='xs
    0 'xs len do loop:
        over over < while loop
        swap dup ='i 1 + swap
        ''x ('xs 'i .$) 'f call(x y -> z) ='x
    drop drop
    ''x

sig(xs -> bool) def all:
    t fun(and) @fold

sig(xs -> bool) def any:
    f fun(or) @fold

sig(xs -> int) def sum:
    0 fun(+) @fold

sig(xs -> int) def prod:
    1 fun(*) @fold



sig(->) def test:

    (arr 1, 2, 3,) fun(10 *) @map
        lpop 10 == assert
        lpop 20 == assert
        lpop 30 == assert
    len 0 == assert

    (arr t, t, t,) @all assert
    (arr t, f, t,) @all not assert

    (arr t, f, t,) @any assert
    (arr f, f, f,) @any not assert

    (arr 1, 2, 3, 4,) @sum 10 == assert
    (arr 1, 2, 3, 4,) @prod 24 == assert


