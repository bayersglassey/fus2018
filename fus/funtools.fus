
def sig(xs f ->xs) map:
    ='f ='xs
    'xs len int_for: ='i
        ''xs 'i ..$
            'f call(x -> y)
        'i =.$ ='xs
    ''xs

def sig(xs x f -> x) fold:
    ='f ='x ='xs
    'xs len int_for: ='i
        ''x ('xs 'i .$) 'f call(x y -> z) ='x
    ''x

def sig(xs -> bool) all:
    T fun(and) @fold

def sig(xs -> bool) any:
    F fun(or) @fold

def sig(xs -> int) sum:
    0 fun(+) @fold

def sig(xs -> int) prod:
    1 fun(*) @fold



def sig(->) test:

    (arr 1, 2, 3,) fun(10 *) @map
        lpop 10 == assert
        lpop 20 == assert
        lpop 30 == assert
    len 0 == assert

    (arr T, T, T,) @all assert
    (arr T, F, T,) @all not assert

    (arr T, F, T,) @any assert
    (arr F, F, F,) @any not assert

    (arr 1, 2, 3, 4,) @sum 10 == assert
    (arr 1, 2, 3, 4,) @prod 24 == assert


