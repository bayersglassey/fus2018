
def test of(->):
    # Test basic generator behaviour

    @new
    dup @cur_index  0 == assert
    dup @cur_value  0 == assert
    @pop  0 == assert
    @pop  1 == assert
    @pop  1 == assert
    @pop  2 == assert
    @pop  3 == assert
    @pop  5 == assert
    @pop  8 == assert
    @pop 13 == assert
    dup @cur_index  8 == assert
    dup @cur_value 21 == assert
    drop

def test_cache of(->):
    # The cache should let us do lookups of arbitrary indices

    @new
    # First call to @get does the calculations:
    7 @get 13 == assert
    # Second call to @get does a quick array lookup:
    7 @get 13 == assert
    drop

def new of(-> gen):
    obj
        0 =.i
        0 =.a
        1 =.b
        arr 0, 1, =.cache

def cur_index of(gen -> i): .i
def cur_value of(gen -> val): .a

def next of(gen -> gen):
    ='gen

    # Get variables from object members:
    'gen .a ='a
    'gen .b ='b

    # Calculate next number in the sequence:
    ''a 'b + ='c

    # Return modified generator:
    ''gen

        # Increment the index:
        ..i 1 + =.i

        # Push newest value onto the "cache" array:
        ..cache 'c, =.cache

        ''b =.a
        ''c =.b

def pop of(gen -> gen val):
    dup @cur_value ='val
    @next
    ''val

def get of(gen i -> gen val):
    # Get "i"th value of Fibonacci sequence

    ='i ='gen
    do:
        # Loop while the requested index is not yet in cache:
        'i ('gen .cache len) >= while
        ''gen @next ='gen
        loop

    # Quick lookup now that index is within cache:
    'gen .cache 'i .$ ='val

    # Return:
    ''gen ''val

@test
@test_cache
