
defsig format: a -> s
defsig tostr: x -> s


sig(->) def test:
    arr "Thing ", 2, ": ", (obj 1 =.x 2 =.y), "!",
    @format "Thing 2: {x: 1, y: 2}!" str_eq assert


sig format
def format:
    "" ='s
    do:
        dup len 0 > while
        lpop @tostr ''s swap str_join ='s
        loop
    drop
    ''s

sig tostr
def tostr:
    obj
        fun(drop "null") =.null
        fun(ifelse("t")("f")) =.bool
        fun(int_tostr) =.int
        fun() =.str
        fun(sym_tostr) =.sym
        fun(drop "<fun>") =.fun
        fun(arr_togen @gen_tostr) =.arr
        &obj_tostr =.obj
        &gen_tostr =.gen
    over typeof get call tostr

sig tostr
def obj_tostr:
    ='o

    "{" ='s
    t ='first

    'o keys do:
        dup len 0 > while
        lpop ='key
        'o 'key get ='val
        ''s
            'first ifelse: f ='first
            : ", " str_join
            'key sym_tostr str_join
            ": " str_join
            'val @tostr str_join
        ='s
        loop
    drop

    ''s "}" str_join

sig tostr
def gen_tostr:

    "[" ='s
    0 ='i

    for:
        ='val
        'i 10 >= if: ''s ", ..." str_join ='s break
        ''s
            'i 0 > if: ", " str_join
            'val @tostr str_join
        ='s
        ''i 1 + ='i

    ''s "]" str_join

