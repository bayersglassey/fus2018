
defsig format: a -> s
defsig tostr: x -> s


sig(->) def test:
    arr "Thing ", 2, ": ", (obj 1 =.x 2 =.y), "!",
    @format "Thing 2: {x: 1, y: 2}!" str_eq assert


sig format
def format:
    "" ='s
    do loop:
        dup len 0 > while loop
        lpop @tostr ''s swap str_join ='s
    drop
    ''s

sig tostr
def tostr:
    obj
        fun(drop "null") =.null
        fun(ifelse("t")("f")) =.bool
        fun(int_tostr) =.int
        fun() =.str
        fun(sym_tostr) =.sym
        fun(drop "<fun>") =.fun
        &obj_tostr =.obj
        &arr_tostr =.arr
    over typeof get call tostr

sig tostr
def obj_tostr:
    ='o

    "{" ='s
    t ='first

    'o keys do loop:
        dup len 0 > while loop
        lpop ='key
        'o 'key get ='val
        ''s
            'first ifelse: f ='first
            : ", " str_join
            'key sym_tostr str_join
            ": " str_join
            'val @tostr str_join
        ='s
    drop

    ''s "}" str_join

sig tostr
def arr_tostr:
    ='a

    "[" ='s
    t ='first

    0 'a len do loop:
        over over < while loop
        swap dup ='i 1 + swap
        'a 'i .$ ='val
        ''s
            'first ifelse: f ='first
            : ", " str_join
            'val @tostr str_join
        ='s
    drop drop

    ''s "]" str_join
