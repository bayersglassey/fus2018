
# SIMPLE HEAP IMPLEMENTATION:
#
# Keys are integers, key-value pairs are stored in a big array,
# search algorithm is linear.
# An improved heap would e.g. use a binary tree instead of an
# array.



def test of(->):
    @new ='heap
    ''heap "Lawl" @add ='key1 ='heap
    ''heap "Rawr" @add ='key2 ='heap
    ''heap "Rofl" 'key1 @set ='heap

    'heap 'key1 @get "Rofl" str_eq assert
    'heap 'key2 @get "Rawr" str_eq assert

    'heap "ZZZ" @find is_null assert

    'heap 'key1 @has assert
    ''heap 'key1 @del ='heap
    'heap 'key1 @has not assert


def new of(-> heap):
    obj
        0 =.next_key
        arr =.entries

def add of(heap value -> heap key):
    ='value ='heap
    ''heap
        ..next_key dup ='key 1 + =.next_key
        ..entries (obj 'key =.key 'value =.value), =.entries
    'key

def find of(heap key -> index):
    ='key ='heap
    'heap .entries ='entries
    null ='i
    0 'entries len do:
        over over >= if: null ='i break
        swap dup ='i 1 + swap
        'entries 'i .$ .key 'key == if: break
        loop
    drop drop
    'i

def has of(heap key -> bool):
    @find is_null not

def get of(heap key -> value):
    over ='heap
    @find ='i
    'heap .entries 'i .$ .value

def set of(heap key value -> heap):
    swap ='value
    over ='heap
    @find ='i
    ''heap
        ..entries 'i ..$ 'value =.value 'i =.$ =.entries


def arr_del of(arr i -> arr):
    ='i ='a
    'a 0 'i slice
    ''a ('i 1 +) (over len over -) slice
    join

def del of(heap key -> heap):
    over ='heap
    @find ='i
    ''heap
        ..entries 'i @arr_del =.entries

@test
