
defsig eq: x y -> bool


sig eq
def eq:
    ='y ='x
    'x typeof 'y typeof sym_eq not if: f return

    obj
        fun(drop drop t) =.null
        fun(bool_eq) =.bool
        fun(==) =.int
        fun(str_eq) =.str
        fun(sym_eq) =.sym
        fun("Can't compare functions!" error) =.fun
        fun("Can't compare generators!" error) =.gen
        &obj_eq =.obj
        &arr_eq =.arr
    'x typeof get ='f

    'x 'y 'f call eq


sig eq
def obj_eq:
    ='y ='x
    ('x keys) ('y keys) @arr_eq not if: f return

    t ='result
    'x keys @arr_togen for: ='key
        ('x 'key get) ('y 'key get) @eq not if: f ='result break

    'result


sig eq
def arr_eq:
    ='ys ='xs
    ('xs len) ('ys len) != if: f return

    t ='result
    'xs len @int_togen for: ='i
        ('xs 'i .$) ('ys 'i .$) @eq not if: f ='result break

    'result


sig(->)
def test:
    arr
        null,
        1,
        "ASD",
        t,
        (arr 1, 2, 3,),
        (obj 1 =.x 2 =.y),
    ='x

    "eq success" p
    'x 'x @eq assert
    "ok" p

    "eq failure - bad type" p
    'x 3 @eq not assert
    "ok" p

    "eq failure - bad type in recursive call" p
    'x ('x 2 0 =.$) @eq not assert
    "ok" p

    "eq failure - int" p
    'x ('x 2 1 =.$) @eq not assert
    "ok" p

    "eq failure - str" p
    'x ('x "ASX" 2 =.$) @eq not assert
    "ok" p

    "eq failure - bool" p
    'x ('x f 3 =.$) @eq not assert
    "ok" p

    "eq failure - arr" p
    'x ('x arr 4 =.$) @eq not assert
    'x ('x (arr "la", "wee",) 4 =.$) @eq not assert
    "ok" p

    "eq failure - obj" p
    'x ('x obj 5 =.$) @eq not assert
    'x ('x (obj 2 =.x 3 =.y) 5 =.$) @eq not assert
    'x ('x (obj 1 =.x 2 =.y 3 =.z) 5 =.$) @eq not assert
    "ok" p

