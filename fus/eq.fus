
def eq of(x y -> bool):
    ='y ='x
    'x typeof 'y typeof sym_eq not if: F break

    obj
        fun of(x y -> bool)(drop drop T) =.null
        fun of(x y -> bool)(bool_eq) =.bool
        fun of(x y -> bool)(==) =.int
        fun of(x y -> bool)(str_eq) =.str
        fun of(x y -> bool)(sym_eq) =.sym
        fun of(x y -> bool):
            obj
                "Can't compare functions!" =.msg
                'x =.x
                'y =.y
            error
        =.fun
        &obj_eq =.obj
        &arr_eq =.arr
    'x typeof get ='f

    'x 'y 'f call of(x y -> bool)


def obj_eq of(x y -> bool):
    ='y ='x
    ('x keys) ('y keys) @arr_eq not if: F break

    T ='result
    'x keys arr_for: ='key
        ('x 'key get) ('y 'key get) @eq not if: F ='result break

    'result


def arr_eq of(x y -> bool):
    ='ys ='xs
    ('xs len) ('ys len) != if: F break

    T ='result
    'xs len int_for: ='i
        ('xs 'i .$) ('ys 'i .$) @eq not if: F ='result break

    'result


def test of(->):
    arr
        null,
        1,
        "ASD",
        T,
        (arr 1, 2, 3,),
        (obj 1 =.x 2 =.y),
    ='x

    "eq success" p
    'x 'x @eq assert
    "ok" p

    "eq failure - bad type" p
    'x 3 @eq not assert
    "ok" p

    "eq failure - bad type in recursive call" p
    'x ('x 2 0 =.$) @eq not assert
    "ok" p

    "eq failure - int" p
    'x ('x 2 1 =.$) @eq not assert
    "ok" p

    "eq failure - str" p
    'x ('x "ASX" 2 =.$) @eq not assert
    "ok" p

    "eq failure - bool" p
    'x ('x F 3 =.$) @eq not assert
    "ok" p

    "eq failure - arr" p
    'x ('x arr 4 =.$) @eq not assert
    'x ('x (arr "la", "wee",) 4 =.$) @eq not assert
    "ok" p

    "eq failure - obj" p
    'x ('x obj 5 =.$) @eq not assert
    'x ('x (obj 2 =.x 3 =.y) 5 =.$) @eq not assert
    'x ('x (obj 1 =.x 2 =.y 3 =.z) 5 =.$) @eq not assert
    "ok" p

