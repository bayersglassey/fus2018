
sig: x0 x1 add -> xs
def range:
    # Example: 0 3 1 @range -> arr 0, 1, 2,
    ='add
    arr ='a
    do loop:
        # (x0 x1)
        over over != while loop
        swap
            # (x1 x0)
            dup ''a swap push ='a
            # (x1 x0)
            'add +
        swap
    drop drop
    ''a


sig: xs len -> xs
def resize:

    def min:
        ='y ='x
        'x 'y < ifelse('x)('y)

    ='new_len ='xs
    null 'new_len repeat ='new_xs
    0 ('xs len 'new_len @min) do loop:
        over over < while loop
        swap dup ='i 1 + swap

        ''new_xs ('xs 'i .$) 'i =.$ ='new_xs
    drop drop

    ''new_xs



defsig step: arr state val i -> arr state

sig: arr state step -> arr state
def for:
    ='step
    0 ='i
    do loop:
        over len 'i > while loop
        over 'i .$ 'i
        'step call step
        ''i 1 + ='i


sig(->)
def test:
    0 3 1 @range
    lpop 0 == assert
    lpop 1 == assert
    lpop 2 == assert
    len 0 == assert

    12 10 -1 @range
    lpop 12 == assert
    lpop 11 == assert
    len 0 == assert

    (arr 1, 2,) 4 @resize
        lpop 1 == assert
        lpop 2 == assert
        lpop is_null assert
        lpop is_null assert
    len 0 == assert

    (arr 1, 2, 3, 4,) 2 @resize
        lpop 1 == assert
        lpop 2 == assert
    len 0 == assert

    arr 20, 30, 40,
    obj 0 =.sum 1 =.prod
    sig step fun:
        drop ='val
        ..sum 'val + =.sum
        ..prod 'val * =.prod
    @for nip
        dup .sum 90 == assert
        dup .prod 24000 == assert
    drop
