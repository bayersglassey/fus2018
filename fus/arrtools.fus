
def range of(x0 x1 add -> xs):
    # Example: 0 3 1 @range -> arr 0, 1, 2,
    ='add
    arr ='a
    do:
        # (x0 x1)
        over over != while
        swap
            # (x1 x0)
            dup ''a swap push ='a
            # (x1 x0)
            'add +
        swap
        loop
    drop drop
    ''a


def min of(x y -> z):
    ='y ='x
    'x 'y < ifelse('x)('y)
def resize of(xs len -> xs):
    ='new_len ='xs
    null 'new_len repeat ='new_xs
    'xs len 'new_len @min int_for: ='i
        ''new_xs ('xs 'i .$) 'i =.$ ='new_xs
    ''new_xs



def for of(arr state step -> arr state):
    ='step
    0 ='i
    over len int_for: ='i
        over 'i .$ 'i
        'step call(arr state val i -> arr state)


def test of(->):
    0 3 1 @range
    lpop 0 == assert
    lpop 1 == assert
    lpop 2 == assert
    len 0 == assert

    12 10 -1 @range
    lpop 12 == assert
    lpop 11 == assert
    len 0 == assert

    (arr 1, 2,) 4 @resize
        lpop 1 == assert
        lpop 2 == assert
        lpop is_null assert
        lpop is_null assert
    len 0 == assert

    (arr 1, 2, 3, 4,) 2 @resize
        lpop 1 == assert
        lpop 2 == assert
    len 0 == assert

    arr 20, 30, 40,
    obj 0 =.sum 1 =.prod
    fun of(arr state val i -> arr state):
        drop ='val
        ..sum 'val + =.sum
        ..prod 'val * =.prod
    @for nip
        dup .sum 90 == assert
        dup .prod 24000 == assert
    drop

@test

