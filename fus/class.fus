
def int_methods of(-> o):
    obj
        fun of(a b -> c)(.data swap .data swap + @int_new) =.add
        fun of(a b -> c)(.data swap .data swap - @int_new) =.sub
        fun of(a b -> c)(.data swap .data swap ==) =.eq
def str_methods of(-> o):
    obj
        fun of(a b -> c)(.data swap .data swap str_join @str_new) =.add
        fun of(a b -> c)("Can't subtract strings" error) =.sub
        fun of(a b -> c)(.data swap .data swap str_eq) =.eq
def point_methods of(-> o):
    obj
        fun of(a b -> c):
            ='b ='a
            ''a
                ..x 'b .x @add =.x
                ..y 'b .y @add =.y
        =.add
        fun of(a b -> c):
            ='b ='a
            ''a
                ..x 'b .x @sub =.x
                ..y 'b .y @sub =.y
        =.sub
        fun of(a b -> c):
            ='b ='a
            ('a .x 'b .x @eq) not if: F return
            ('a .y 'b .y @eq)
        =.eq
def int_new of(i -> o):
    obj
        swap =.data `int =.classname @int_methods =.methods
def str_new of(s -> o):
    obj
        swap =.data `str =.classname @str_methods =.methods
def point_new of(i i -> o):
    ='y ='x
    obj
        'x =.x 'y =.y
        `point =.classname
        @point_methods =.methods

def method_binop_call of(a b sym -> c):
    ='method_name ='b ='a
    'a .methods 'method_name get ='f
    ''a ''b ''f call of(a b -> c)
def add: `add @method_binop_call
def sub: `sub @method_binop_call
def eq: `eq @method_binop_call
def ne: @eq not

def test of(->):

            1 @int_new
            2 @int_new
        @add
        3 @int_new
    @eq assert

                1 @int_new
                2 @int_new
            @point_new
                3 @int_new
                4 @int_new
            @point_new
        @add
            4 @int_new
            6 @int_new
        @point_new
    @eq assert

@test
