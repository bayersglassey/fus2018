
defsig methods(-> o)
defsig new(-> o)
defsig binop(a b -> c)

sig methods def int_methods:
    obj
        sig binop fun(.data swap .data swap + @int_new) =.add
        sig binop fun(.data swap .data swap - @int_new) =.sub
        sig binop fun(.data swap .data swap ==) =.eq
sig methods def str_methods:
    obj
        sig binop fun(.data swap .data swap str_join @str_new) =.add
        sig binop fun("Can't subtract strings" error) =.sub
        sig binop fun(.data swap .data swap str_eq) =.eq
sig methods def point_methods:
    obj
        sig binop fun:
            ='b ='a
            ''a
                ..x 'b .x @add =.x
                ..y 'b .y @add =.y
        =.add
        sig binop fun:
            ='b ='a
            ''a
                ..x 'b .x @sub =.x
                ..y 'b .y @sub =.y
        =.sub
        sig binop fun:
            ='b ='a
            ('a .x 'b .x @eq) ('a .y 'b .y @eq) and
        =.eq
sig new def int_new:
    obj
        swap =.data `int =.classname @int_methods =.methods
sig new def str_new:
    obj
        swap =.data `str =.classname @str_methods =.methods
sig new def point_new:
    ='y ='x
    obj
        'x =.x 'y =.y
        `point =.classname
        @point_methods =.methods

sig(a b sym -> c) def method_binop_call:
    ='method_name ='b ='a
    'a .methods 'method_name get ='f
    ''a ''b ''f call binop
sig binop def add: `add @method_binop_call
sig binop def sub: `sub @method_binop_call
sig binop def eq: `eq @method_binop_call
sig binop def ne: @eq not

sig(->)
def test:

            1 @int_new
            2 @int_new
        @add
        3 @int_new
    @eq assert

                1 @int_new
                2 @int_new
            @point_new
                3 @int_new
                4 @int_new
            @point_new
        @add
            4 @int_new
            6 @int_new
        @point_new
    @eq assert

