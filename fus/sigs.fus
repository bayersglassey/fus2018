
def test of(->):
    0 ='n
    0 ='n_ok
    @TEST_PROGRAMS arr_for: ='program
        'n 0 > if: "\n" str_p
        ''n 1 + ='n

        "PROGRAM: " str_p 'program .title str_p "\n" str_p

        'program .data @parser_new
            #T =.debug
            1 =.depth
        @parser_parse ='parser

        'parser .err is_null not ifelse:
            "  *** PARSE ERROR:\n" str_p
            'parser .err p

        :
            'program .expected_in ='ex_in
            'program .expected_out ='ex_out
            'parser .in ='in
            'parser .out ='out

            "  SIG: " str_p
            'in 'out @sig_p
            "\n" str_p

            "  VARS: " str_p
            'parser .vars @vars_p
            "\n" str_p

            'in 'out 'ex_in 'ex_out @sig_eq not ifelse:
                "  *** SIG MISMATCH! EXPECTED:\n" str_p
                "  SIG: " str_p
                'ex_in 'ex_out @sig_p
                "\n" str_p

            : ''n_ok 1 + ='n_ok

    "\n" str_p
    'n_ok int_tostr str_p
    "/" str_p
    'n int_tostr str_p
    " OK\n" str_p

def tabs of(depth ->):
    int_for: drop "  " str_p

###############################################################################
# TYPE

def type_p of(x ->):
    ='x
    'x is_str if: 'x str_p break
    'x is_int if: 'x int_tostr str_p break
    'x is_sym if: 'x sym_tostr str_p break
    'x is_arr if: 'x @stack_p break
    obj
        "Bad type (data can only contain int, str, sym, arr)" =.msg
        'x =.x
    error

def type_match of (l r -> bool):
    # If we try to consume l as if it were r, do we have any chance of
    # succeeding?
    ='r ='l
    'r `any sym_eq if:
        # everything matches `any
        T break
    'l `any sym_eq if:
        # `any might be anything, so might match anything
        T break
    'l 'r sym_eq


###############################################################################
# VARS

def vars_p of(vars ->):
    ='vars
    T ='first
    'vars keys arr_for: ='key
        'vars 'key get ='val
        'first ifelse(F ='first)(" " str_p)
        "(" str_p
        'key @type_p
        " " str_p
        'val @type_p
        ")" str_p

def vars_update of(vars new_vars -> vars):
    ='new_vars ='vars
    'vars keys arr_for: ='key
        'new_vars 'key get ='new_type
        ''vars 'new_type 'key set ='vars
    'vars


###############################################################################
# STACK

def stack_p of(stack ->):
    T ='first
    arr_for: ='x
        'first ifelse(F ='first)(" " str_p)
        'x @type_p

def stack_pop_n of(stack n -> substack):
    # Pop n elements off right side of a "stack".
    # Example: data(int str any) 2 @stack_pop_n -> data(int)
    ='n ='stack
    'stack len ='len
    ''stack 0 ('len 'n -) slice

def stack_eq of(lhs rhs -> eq):
    ='rhs ='lhs
    'lhs len 'rhs len != if: F break
    T ='eq
    'lhs len int_for: ='i
        ('lhs 'i .$) ('rhs 'i .$) sym_eq not if: F ='eq break
    'eq

def stack_match of(lhs rhs -> lhs rhs ok):
    # Matches elements (syms representing types) of "stacks" lhs and rhs.
    # The elements are popped & compared one at a time.
    # Returns (lhs rhs ok), where lhs and rhs are the stacks (modified by
    # popping), and ok indicates success or failure (type mismatch).
    # Examples:
    #     data(int str) data(arr any str) @stack_match -> data() data(arr) T
    #     data(int str) data(any arr) @stack_match -> data(int) data(any) F
    ='rhs ='lhs
    T ='ok
    0 ='n
    do:
        'rhs len 0 > and('lhs len 0 >) while
        ''rhs pop ='r ='rhs
        ''lhs pop ='l ='lhs
        'l 'r @type_match not if: F ='ok break
        loop

    'lhs 'rhs 'ok


###############################################################################
# SIG

def sig_p of(in out ->):
    ='out ='in
    'in len 0 > if: 'in @stack_p " " str_p
    "->" str_p
    'out len 0 > if: " " str_p 'out @stack_p

def parse_sig of(data -> in out):
    ='data
    arr ='in arr ='out

    -1 ='arrow_index
    'data len int_for: ='i
        'data 'i .$ ` -> sym_eq if: 'i ='arrow_index break

    'arrow_index 0 < if:
        obj
            "Can't parse data as sig: missing \"->\"" =.msg
            'data =.data
        error

    'data 0 'arrow_index slice
    'data ('arrow_index 1 +) (dup 'data len swap -) slice

def sig_eq of(in_l out_l in_r out_r -> bool):
    ='out_r ='in_r ='out_l ='in_l
    'in_l 'in_r @stack_eq
    and: 'out_l 'out_r @stack_eq

def sig_join of(in_l out_l in_r out_r -> in out ok):
    # Joins two signatures, returning a signature.
    # The 'ok param indicates type match or mismatch.
    # If 'ok is false, 'in and 'out are invalid and should not be used.
    #
    # A signature is a pair of arrs representing "stack effects".
    # The first ("in") arr represents popping a series of elements from the
    # stack, the second ("out") arr represents pushing a series of elements
    # onto the stack.

    ='out_r ='in_r ='out_l ='in_l

    # Right-hand signature "consumes" from left-hand one
    ''out_l ''in_r @stack_match ='ok ='in_r ='out_l

    'ok not if:
        # type mismatch -> no valid way to determine in, out
        null null F break

    # NOTE: If there was no type mismatch, then one or both of
    # in_r, out_l are empty arrs.
    # So one or both of the following are a no-op.
    ''in_l  ''in_r  join ='in
    ''out_l ''out_r join ='out

    'in 'out T


###############################################################################
# PARSER

def parser_new of(data -> parser):
    ='data
    obj
        @KEYWORDS =.keywords
        'data =.data
        0 =.i
        obj =.vars
        arr =.in
        arr =.out
        null =.err
        0 =.depth
        F =.debug

def parser_parse of(parser -> parser):
    ='parser
    do:
        ''parser @parser_step ='ok ='parser
        'ok while loop
    # Return:
    'parser

def parser_step of(parser -> parser ok):
    ='parser
    'parser .data ='data
    'parser .i ='i
    'data len ='data_len
    null ='err
    T ='ok
    do:
        'i 'data_len >= if: F ='ok break
        'data 'i .$ ='word

        'parser .debug if:
            'parser .depth ='depth
            'depth @tabs "PARSER STEP\n" str_p
            'depth @tabs "  i: " str_p 'i p
            'depth @tabs "  word: " str_p
            'word is_arr ifelse: "data(...)\n" str_p
            : 'word p

        arr ='word_in
        arr ='word_out
        do:
            'word is_int if: arr `int, ='word_out break
            'word is_str if: arr `str, ='word_out break
            'word is_arr if:
                'word @parser_new
                    'parser .debug =.debug
                    'parser .depth 1 + =.depth
                    'parser .vars =.vars
                @parser_parse
                    dup .in ='word_in
                    dup .out ='word_out
                    dup .vars ='new_vars
                    dup .err ='err
                drop
                'err is_null not if: F ='ok break
                ''parser ..vars 'new_vars @vars_update =.vars ='parser
                break
            'word is_sym if:
                'parser .keywords 'word has not if:
                    obj
                        "Keyword not found" =.msg
                        'word =.word
                        'i =.i
                    ='err
                    F ='ok break

                ''parser 'word @parser_parse_sym
                ='ok ='err ='word_out ='word_in ='i ='parser
                break

            obj
                "Word has invalid type "
                "(data can only contain int, str, arr, sym)"
                str_join =.msg
                'word =.word
                'i =.i
            ='err
            F ='ok break

        'ok not if: break

        'parser .in ='in
        'parser .out ='out
        'in 'out 'word_in 'word_out @sig_join ='ok ='new_out ='new_in
        'ok not if:
            obj
                "Type mismatch" =.msg
                'word =.word
                'i =.i
                'in =.in 'out =.out
                'word_in =.word_in 'word_out =.word_out
            ='err
            F ='ok break
        ''parser 'new_in =.in 'new_out =.out ='parser

    # Return:
    ''parser
        'i 1 + =.i
        'err =.err
    'ok

def parser_parse_sym of(parser word -> parser i word_in word_out err ok):
    # Assumes 'word is in 'parser .keywords (caller should check)

    ='word ='parser
    'parser .data ='data
    'parser .i ='i
    'data len ='data_len
    null ='err
    T ='ok

    'parser .keywords 'word get ='keyword
    'keyword .in ='word_in
    'keyword .out ='word_out
    'keyword .args ='word_args

    do:
        arr ='args
        'i 1 + ='new_i
        'word_args arr_for: ='word_arg
            'new_i 'data_len >= if:
                obj
                    "Hit end of data, expected argument" =.msg
                    'word =.word
                    'i =.i
                    'data 'i ('data_len 'i -) slice =.data_slice
                ='err
                F ='ok break

            'data 'new_i .$ ='arg
            'arg typeof 'word_arg @type_match not if:
                obj
                    "Unexpected argument type" =.msg
                    'word =.word
                    'i =.i
                    ('new_i 'i -) =.arg_offset
                    'word_arg =.word_arg
                    'arg =.arg
                ='err
                F ='ok break

            ''args 'arg, ='args
            ''new_i 1 + ='new_i loop
        'ok not if: break
        'new_i 1 - ='i

        do:
            'word ` =' sym_eq if:
                # VAR SET
                'args 0 .$ ='var_name

                :
                    'parser .out len 0 == ifelse: `any
                    : 'parser .out (dup len 1 -) .$
                ='var_type

                'parser .vars ='vars
                'vars 'var_name has if:
                    'vars 'var_name get ='var_oldtype
                    'var_type 'var_oldtype @type_match not if:
                        obj
                            "Unexpected var type" =.msg
                            'word =.word
                            'i =.i
                            ('new_i 'i -) =.arg_offset
                            'word_arg =.word_arg
                            'arg =.arg
                            'var_name =.var_name
                            'var_oldtype =.var_oldtype
                            'var_type =.var_type
                        ='err
                        F ='ok break

                ''word_in pop drop 'var_type, ='word_in
                ''vars 'var_type 'var_name set ='vars
                ''parser 'vars =.vars ='parser
                break

            'word ` ' sym_eq if:
                # VAR GET
                'args 0 .$ ='var_name

                'parser .vars ='vars
                'vars 'var_name has not if:
                    obj
                        "Ref to missing var" =.msg
                        'word =.word
                        'i =.i
                        ('new_i 'i -) =.arg_offset
                        'word_arg =.word_arg
                        'arg =.arg
                        'var_name =.var_name
                    ='err
                    F ='ok break

                'vars 'var_name get ='var_type
                ''word_out pop drop 'var_type, ='word_out
                    # data(any) -> data()
                ''parser 'vars =.vars ='parser
                break

            'word ` | sym_eq if:
                # TYPE HINT
                'args 0 .$ ='type

                F ='ok
                data: null bool int sym arr obj str fun
                arr_for: 'type sym_eq if: T ='ok break
                'ok not if:
                    obj
                        "Invalid type (must be one of: "
                        "null bool int sym arr obj str fun)"
                        str_join =.msg
                        'word =.word
                        'i =.i
                        'type =.type
                    break

                # We pretend we're going to consume a value of the given
                # type, then put it back.
                # (Really we just want to make sure something of the given
                # type is on the stack.)
                ''word_out pop drop 'type, ='word_out
                ''word_in pop drop 'type, ='word_in
                break

            'word ` '' sym_eq if:
                # VAR RIP
                'args 0 .$ ='var_name

                # ?????

                break

        break

    # Return:
    'parser 'i 'word_in 'word_out 'err 'ok


###############################################################################
# KEYWORDS

def keyword of(keywords op in out args -> keywords):
    obj
        swap =.args
        swap =.out
        swap =.in
        swap dup ='op =.op
    'op set

def KEYWORDS of(-> keywords):
    obj
        `   ' data() data(any) data(sym) @keyword
        `  '' data() data(any) data(sym) @keyword
        `  =' data(any) data() data(sym) @keyword
        `   . data(obj) data(any) data(sym) @keyword
        `  .. data(obj) data(obj any) data(sym) @keyword
        `  =. data(obj any) data(obj) data(sym) @keyword
        `  .$ data(arr int) data(any) data() @keyword
        ` ..$ data(arr int) data(arr any) data() @keyword
        ` =.$ data(arr any int) data(arr) data() @keyword
        `   + data(int int) data(int) data() @keyword
        `   - data(int int) data(int) data() @keyword
        `   * data(int int) data(int) data() @keyword
        `   / data(int int) data(int) data() @keyword
        `  == data(int int) data(bool) data() @keyword
        `  != data(int int) data(bool) data() @keyword
        `   > data(int int) data(bool) data() @keyword
        `   < data(int int) data(bool) data() @keyword
        `  >= data(int int) data(bool) data() @keyword
        `  <= data(int int) data(bool) data() @keyword
        `   , data(arr any) data(arr) data() @keyword
        `   | data(any) data(any) data(sym) @keyword

        # TODO: these should transform stack effects the same way they
        # transform the actual stack
        `swap data(any any) data(any any) data() @keyword
        `drop data(any) data() data() @keyword
        `dup data(any) data(any any) data() @keyword
        `nip data(any any) data(any) data() @keyword
        `over data(any any) data(any any any) data() @keyword

        # NOTE: "null" keyword pushes "any" type, since the sole purpose of
        # a null value is to be a placeholder for something else...
        `null data() data(any) data() @keyword
        `arr data() data(arr) data() @keyword
        `obj data() data(obj) data() @keyword
        `int_tostr data(int) data(str) data() @keyword
        `sym_tostr data(sym) data(str) data() @keyword
        `str_getcode data(str int) data(int) data() @keyword
        `str_setcode data(str int int) data(str) data() @keyword
        `str_join data(str str) data(str) data() @keyword
        `str_len data(str) data(int) data() @keyword
        `join data(arr arr) data(arr) data() @keyword
        `len data(arr) data(int) data() @keyword


###############################################################################
# TEST PROGRAMS

def test_program of(title expected_sig data -> program):
    obj
        swap =.data
        swap @parse_sig ='out ='in
        'in =.expected_in
        'out =.expected_out
        swap =.title

def TEST_PROGRAMS of(-> programs): arr

    "fib.fus: next of(gen -> gen)"
    data: obj -> obj
    data:
        ='gen

        # Get variables from object members:
        'gen .a ='a
        'gen .b ='b

        # Calculate next number in the sequence:
        ''a 'b + ='c

        # Return modified generator:
        ''gen:

            # Increment the index:
            ..i 1 + =.i

            # Push newest value onto the "cache" array:
            ..cache 'c, =.cache

            ''b =.a
            ''c =.b
    @test_program,

    "map_parser.fus: char_tostr of(i -> s)"
    data: int -> str
    data: " " swap 0 str_setcode
    @test_program,

    "map_parser.fus: strchr of(s c -> i)"
    data: str int -> int
    data:
        ='c ='s
        null ='found_i
        's str_len int_for: ='i
            ('s 'i str_getcode) 'c == if:
                'i ='found_i break
        ''found_i
    @test_program,

    "map_parser.fus: format of (arr -> str)"
    data: arr -> str
    data:
        "" swap arr_for: ='x
            'x is_int if: ''x int_tostr ='x
            ''x str_join
    @test_program,

    "map_parser.fus: repeat of(elem n -> elems)"
    data: any int -> arr
    data: swap ='elem arr swap int_for: drop 'elem,
    @test_program,

    "map_parser.fus: max of(x y -> z)"
    data: int int -> int
    data: over over > ifelse(drop)(nip)
    @test_program,

    "add"
    data: int int -> int
    data: +
    @test_program,

    "var test"
    data: -> int
    data: 1 ='x 'x
    @test_program,

    "var test - setting var has effect: (any ->)"
    data: int -> int
    data: ='x 'x 1 +
    @test_program,

    "var test - type hint"
    data: int -> int
    data: |int ='x 'x 1 +
    @test_program,

    "dup test"
    data: -> int int
    data: 1 dup
    @test_program,
