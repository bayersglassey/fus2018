

def test of(->):
    use: Schema new
    use: Schema create
    use: Schema finish
    use: Schema add_field
    use: Schema fields ID
    use: Schema fields STR
    use: Schema fields DECIMAL
    @new
        `bank_account =.name
        "Bank Account" =.title
        `id @ID @add_field
        `first_name @STR F =.allow_empty @add_field
        `last_name @STR F =.allow_empty @add_field
        `dollars @DECIMAL 2 =.precision @add_field
    @finish ='schema

    'schema .primary_key `id sym_eq assert

    # A "RUN" KEYWORD LIKE THIS WOULD BE COOL
    # ...it would take the place of "try..catch" etc
    # Also, the way we use it here, it appears to automatically copy
    # vars from parent scope
    # We could presumably let it use takes(...) as well
    run: 'schema obj @create
    dup .ok not assert
    .error
        dup keys len 2 == assert
        dup .first_name .code `missing_field sym_eq assert
        dup .last_name .code `missing_field sym_eq assert
    drop

    'schema (obj "Adam" =.first_name "X" =.last_name) @create ='adam
    'adam ._schema .name `bank_account sym_eq assert
    'adam .first_name "Adam" str_eq assert
    'adam .dollars 0 @(Decimal eq) assert


module Schema:

    module fields:
        def ID: @INT T =.auto_inc T =.primary T =.unique F =.allow_null F =.allow_empty
        def BOOL: obj `bool =.type F =.default
        def INT: obj `int =.type 0 =.default
        def STR: obj `str =.type "" =.default null =.max_len
        def DECIMAL: obj `decimal =.type @(Decimal zero) =.default null =.precision

    def new:
        obj
            `Schema =.type
            null =.title
            null =.name
            null =.table_name
            arr =.fields
            null =.primary_key
            F =.finished

    def create of(schema -> object):
        ='schema
        obj 'schema =._schema ='object
        'schema .fields ='fields
        'fields arr_for: ='field
            'field .name ='name
            'field .default ='value
            ''object ''value 'name set ='object
        ''object

    def finish of(schema -> schema):
        ='schema
        'schema .title is_null if:
            obj
                `no_title =.code
                "Schema has no title" =.msg
            error
        'schema .name is_null if:
            obj
                `no_name =.code
                "Schema has no name" =.msg
            error
        'schema .table_name is_null if:
            ''schema ('schema .name sym_tostr) =.table_name ='schema
        ''schema T =.finished

    def sql_update of(object -> sql):
        ='object
        'object ._schema ='schema

        'schema .primary_key ='pk_name
        'schema 'pk_name @get_field ='pk_field
        'object 'pk_name get ='pk_value
        'pk_field 'pk_value @(Field get_db_value) ='pk_db_value

        # If "fun" can capture variables:
        #'schema 'fields fun: ='field
        #    'object 'field .name get ='value
        #    'field 'value @(Field get_db_value)
        #@map ='values

        # Fancy for-loop which modifies topmost stack element:
        #arr
        #'schema 'fields arr_for: ='field
        #    'object 'field .name get ='value
        #    'field 'value @(Field get_db_value)
        #    push
        #='values

        # The direct approach
        arr ='values
        'schema 'fields arr_for: ='field
            'object 'field .name get ='value
            'field 'value @(Field get_db_value)
            ''values swap, ='values

        'schema ''values @sql_format_values ='db_values

        arr
            "UPDATE ", 'schema .table_name,
            " WHERE ", 'pk_name, " = ", 'pk_db_value,
            " VALUES ", 'db_values, ";",
        @sql_format

    def sql_format_values of(schema values -> db_values):
        # db_values is a str containing valid SQL

        ='values ='schema

        "("
        'values len int_for: ='i
            'values 'i .$ ='value
            'i 0 > if: ", " str_concat
            'schema ''value @sql_format_value str_concat
        ")" str_concat

    def sql_format_value of(schema value -> db_value):
        # Converts a fus value into an SQL value.
        # db_value is a str containing valid SQL

        ='value ='schema
        # ...now if value is an int, do int_tostr.
        # If value is a str, implement SQL string literal quoting.
        # Etc.
        "<TODO>"

    def add_field of(schema name opts -> schema):
        ='opts ='name ='schema
        'name 'opts @(Field new) ='field

        'field .opts .primary if:
            'schema .primary_key is_null not if:
                obj
                    `primary_exists =.code
                    "Schema already has primary key" =.msg
                    'schema .primary_key =.old_key
                    'name =.new_key
                error
            ''schema 'name =.primary_key ='schema

        'schema 'name @get_field ='old_field
        'old_field is_null not if:
            obj
                `field_exists =.code
                "Field already exists" =.msg
                'old_field =.old_field
                'field =.new_field
            error

        ''schema
            ..fields ''field, =.fields

    def get_field of(schema name -> field_or_null):
        ='name
        .fields fun(.name dup 'name sym_eq) @filter @first


module Field:

    def new of(name opts -> field):
        ='opts ='name
        ''opts @validate_opts ='opts
        obj
            `Field =.type
            'name =.name
            'opts =.opts

    def default_opts:
        obj
            null =.type
            F =.auto_inc
            F =.primary
            F =.allow_null
            T =.allow_empty
            F =.unique
            null =.default

    def validate_opts of(opts -> opts):
        ='opts
        'opts is_null if: obj ='opts
        @default_opts
            'opts .allow_null if: null =.default
            ''opts @obj_merge
        ='opts

        T ='ok
        'opts .type is_null if: F ='ok # for example
        'ok not if:
            obj
                `bad_opts =.code
                "Invalid options" =.msg
                'opts =.opts
            error

        ''opts


module Decimal:

    def new:
        ='x
        'x is_int if: ''x @from_int return
        'x is_str if: ''x @from_str return
        'x is_null not if:
            obj
                `Decimal =.module
                `cannot_convert =.code
                "Wrong type" =.msg
                ''x =.value
            error
        @zero

    def zero:
        obj arr 0, =.digits 0 =.decimal_pos

    # etc...

