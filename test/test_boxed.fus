
arr 1, 2, (arr 3, 4,),
dup len 3 == assert
pop
    lpop 3 == assert
    lpop 4 == assert
    len 0 == assert
lpop 1 == assert
lpop 2 == assert
len 0 == assert

obj 10 =.x
    dup ?.x assert
    dup ?.y not assert
    dup `x has assert
    dup `y has not assert
    dup `x get 10 == assert
drop

obj 10 =.x 20 =.y 30 =.x obj =.nested
dup keys
    lpop `x sym_eq assert
    lpop `y sym_eq assert
    lpop `nested sym_eq assert
    len 0 == assert
dup .nested
    "I was .nested" =.msg
    dup .msg "I was .nested" str_eq assert
    "Ich bin .nested" `msg set
    dup .msg "Ich bin .nested" str_eq assert
    drop
dup .x 30 == assert
dup .y 20 == assert
dup .nested ?.msg not assert
drop

obj arr 10, =.x arr 20, =.y
    ..x
        lpop 10 == assert
        len 0 == assert
    dup .x is_null assert
    dup .y
        lpop 20 == assert
        len 0 == assert
    drop

obj arr 10, =.x
    dup ..x drop drop
drop

arr "A", "B", "C",
dup 1 .$ "B" str_eq assert
1 ..$
    "B" str_eq assert
    lpop "A" str_eq assert
    lpop is_null assert
    lpop "C" str_eq assert
    len 0 == assert

arr "A", "B", "C", ='ABC
    'ABC "BEE" 1 =.$
    lpop "A" str_eq assert
    lpop "BEE" str_eq assert
    lpop "C" str_eq assert
    len 0 == assert
    'ABC
    lpop "A" str_eq assert
    lpop "B" str_eq assert
    lpop "C" str_eq assert
    len 0 == assert

"WAN" "DOO" "SRI" tuple 3
lpop "WAN" str_eq assert
lpop "DOO" str_eq assert
lpop "SRI" str_eq assert
len 0 == assert


# Join & Split:

arr "A", "B", arr "C", "D", join
lpop "A" str_eq assert
lpop "B" str_eq assert
lpop "C" str_eq assert
lpop "D" str_eq assert
len 0 == assert

arr "A", "B", "C", "D",
1 2 slice
lpop "B" str_eq assert
lpop "C" str_eq assert
len 0 == assert

arr "A", "B", "C", "D",
-1 6 slice
lpop "A" str_eq assert
lpop "B" str_eq assert
lpop "C" str_eq assert
lpop "D" str_eq assert
len 0 == assert


# Str:

"abcd" str_len 4 == assert

"ab" "cd" str_join
"abcd" str_eq assert

"AB" ='AB
"CD" ='CD
"ABCD" ='ABCD
'AB 'CD str_join 'ABCD str_eq assert
'AB "AB" str_eq assert
'CD "CD" str_eq assert
'ABCD "ABCD" str_eq assert

"abcd" 1 2 str_slice "bc" str_eq assert
"abcd" -1 6 str_slice "abcd" str_eq assert

"A" 0 str_getcode ='A
"xxx" ='xxx
'xxx 'A 1 str_setcode "xAx" str_eq assert
'xxx "xxx" str_eq assert

0 int_tostr "0" str_eq assert
12 int_tostr dup p "12" str_eq assert
-999 int_tostr "-999" str_eq assert

`xyzzy sym_tostr "xyzzy" str_eq assert
"qwerty" str_tosym `qwerty sym_eq assert

# Blockstr:
    ;;Here's a "block string". \n! \"!
    "Here's a \"block string\". \\n! \\\"!"
str_eq assert

"Tests OK!\n" str_p
