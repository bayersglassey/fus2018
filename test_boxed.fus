
arr 1, 2, (arr 3, 4,),
dup len swap
dup
dup pop


obj 10 =.x 20 =.y 30 =.x obj =.nested
dup .nested
    "I was .nested" =.msg
    "Ich bin .nested" =.msg

"And then:"
obj arr 10, =.x arr 20, =.y
    ..x

"Arr get:"
arr "A", "B", "C",
dup 1 .$
over 1 ..$

"Arr set:"
arr "A", "B", "C",
"BEE" 1 =.$


"Join & Split:"

arr "A", "B", arr "C", "D", join
lpop "A" str_eq assert
lpop "B" str_eq assert
lpop "C" str_eq assert
lpop "D" str_eq assert
len 0 == assert

arr "A", "B", "C", "D",
1 2 slice
lpop "B" str_eq assert
lpop "C" str_eq assert
len 0 == assert

arr "A", "B", "C", "D",
-1 6 slice
lpop "A" str_eq assert
lpop "B" str_eq assert
lpop "C" str_eq assert
lpop "D" str_eq assert
len 0 == assert


"Str:"

"abcd" str_len 4 == assert

"ab" "cd" str_join
"abcd" str_eq assert

"AB" ='AB
"CD" ='CD
"ABCD" ='ABCD
'AB 'CD str_join 'ABCD str_eq assert
'AB "AB" str_eq assert
'CD "CD" str_eq assert
'ABCD "ABCD" str_eq assert

"abcd" 1 2 str_slice "bc" str_eq assert
"abcd" -1 6 str_slice "abcd" str_eq assert

"A" 0 str_getcode ='A
"xxx" 'A 1 str_setcode "xAx" str_eq assert

ignore:
    `xyzzy sym_tostr "xyzzy" str_eq assert
    "xyzzy" str_tosym `xyzzy sym_eq assert

"Tests OK!\n" str_p
